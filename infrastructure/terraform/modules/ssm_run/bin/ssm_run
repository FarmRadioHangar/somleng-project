#!/usr/bin/env ruby

require 'json'
require 'optparse'

RAILS_RUNNER_MODE = 'rails_runner'.freeze
BASH_MODE = 'bash'.freeze
VALID_MODES = [RAILS_RUNNER_MODE, BASH_MODE, 'rake'].freeze

command_to_run = ARGV[0].dup

options = {
  output: 'stdout',
  mode: BASH_MODE,
  aws_options: []
}

OptionParser.new do |opts|
  opts.banner = "Usage: ssm_run 'User.find(\"1\")' -n production-live-web"

  opts.on('-n', '--instance-name INSTANCE_NAME', 'EC2 instance name tag') do |name|
    options[:instance_name] = name
  end

  opts.on('-o', '--output buffer', 'stdout or stderr (defaults to stdout)') do |output|
    options[:output] = output
  end

  opts.on('-m', '--mode mode', "#{VALID_MODES.join(', ')} (defaults to #{BASH_MODE})") do |mode|
    options[:mode] = mode
  end

  opts.on('-a', '--aws-options AWS_OPTIONS', 'a list of AWS options in comma separated KEY=value format. E.g. --aws-options profile=default') do |aws_options|
    options[:aws_options] = aws_options.split(/,\s*/)
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

unless VALID_MODES.include?(options.fetch(:mode))
  abort "Invalid mode specified. You specified #{options.fetch(:mode)}. Valid modes are #{VALID_MODES.join(', ')}"
end

command = options.fetch(:mode) == BASH_MODE ? command_to_run : <<-HEREDOC
  sudo su

  set -xe

  EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir)
  EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)
  EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir)

  . $EB_SUPPORT_DIR/envvars
  . $EB_SCRIPT_DIR/use-app-ruby.sh

  cd $EB_APP_DEPLOY_DIR

  bundle exec rails #{'runner' if options.fetch(:mode) == RAILS_RUNNER_MODE} "#{command_to_run.gsub('"', '\\"')}"
HEREDOC

commands = { 'commands' => [command] }

def execute_aws_command!(command, options)
  aws_cli_options = options[:aws_options].map do |aws_option|
    k, v = aws_option.split('=')
    "--#{k} #{v}"
  end
  aws_command = [command, aws_cli_options.join(' ')].join(' ')
  `#{aws_command}`
end

command_id = execute_aws_command!(
  "aws ssm send-command --document-name \"AWS-RunShellScript\" --parameters '#{commands.to_json}' --targets \"Key=tag:Name,Values=#{options.fetch(:instance_name)}\" --output text --query \"Command.CommandId\"",
  options
)

loop do
  list_command_response = execute_aws_command!(
    "aws ssm list-command-invocations --command-id \"#{command_id.strip}\"",
    options
  )

  cmd_response = JSON.parse(list_command_response).dig('CommandInvocations', 0)

  if cmd_response.fetch('Status') != 'InProgress'
    cmd_response = execute_aws_command!(
      "aws ssm get-command-invocation --command-id \"#{command_id.strip}\" --instance-id #{cmd_response.fetch('InstanceId')}",
      options
    )

    cmd_response = JSON.parse(cmd_response)

    if options[:output] == 'stderr'
      puts cmd_response.fetch('StandardErrorContent')
    else
      puts cmd_response.fetch('StandardOutputContent')
    end

    break
  end

  sleep 2
end
